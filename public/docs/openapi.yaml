openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/login:
    post:
      summary: 'Handle a login request to the application.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n   \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjc\n             uMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyMzg5MzAyNCwiZXhwIjo\n             xNjIzODk2NjI0LCJuYmYiOjE2MjM4OTMwMjQsImp0aSI6IndkTllaU3NoejlBZmt\n             PRzgiLCJzdWIiOjExLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA\n             4NzJkYjdhNTk3NmY3In0.eEMJuRcY5OgSD2l4jLhbcBKBA5QvCvkrPBn8ZzKyP38\"\n}"
        422:
          description: '422, Validation error'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors: 'The name or password field is wrong.'
                properties:
                  message: { type: string, example: 'The given data was invalid.' }
                  errors: { type: string, example: 'The name or password field is wrong.' }
      tags:
        - 'Auth endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: email
                  description: 'The email of the user.'
                  example: demo@demo.com
                password:
                  type: password
                  description: 'The password of the user.'
                  example: password
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Log the user out of the application.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        204:
          description: '204, {'
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
        500:
          description: '500, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Server error.'
                properties:
                  message: { type: string, example: 'Server error.' }
      tags:
        - 'Auth endpoints'
  /api/users:
    get:
      summary: 'Shows authenticated user information'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 2
                  name: Demo
                  email: demo@demo.com
                  email_verified_at: null
                  created_at: '2020-05-25T06:21:47.000000Z'
                  updated_at: '2020-05-25T06:21:47.000000Z'
                properties:
                  id: { type: integer, example: 2 }
                  name: { type: string, example: Demo }
                  email: { type: string, example: demo@demo.com }
                  email_verified_at: { type: string, example: null }
                  created_at: { type: string, example: '2020-05-25T06:21:47.000000Z' }
                  updated_at: { type: string, example: '2020-05-25T06:21:47.000000Z' }
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'Auth endpoints'
  /api/register:
    post:
      summary: 'Handle a registration request for the application.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Account has been created'
                properties:
                  message: { type: string, example: 'Account has been created' }
        422:
          description: '422, Validation error'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors: { name: ['The name field is required.'], email: ['The email field is required.'], password: ['The password field is required.'] }
                properties:
                  message: { type: string, example: 'The given data was invalid.' }
                  errors: { type: object, example: { name: ['The name field is required.'], email: ['The email field is required.'], password: ['The password field is required.'] } }
      tags:
        - 'Auth endpoints'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: Demo
                email:
                  type: email
                  description: 'The email of the user.'
                  example: demo@demo.com
                password:
                  type: password
                  description: 'The password of the user.'
                  example: password
                password_confirmation:
                  type: password
                  description: 'The password confirmation of the user.'
                  example: password
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  '/api/comments/{comment}/likes':
    get:
      summary: 'show amount of comment total like'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  'number of the comment like': 100
                  message: Success
                properties:
                  'number of the comment like': { type: integer, example: 100 }
                  message: { type: string, example: Success }
      tags:
        - 'CommentLike endpoint'
      security: []
    post:
      summary: 'create or destroy comment like'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Success. Has been cancel like'
                properties:
                  message: { type: string, example: 'Success. Has been cancel like' }
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'CommentLike endpoint'
    parameters:
      -
        in: path
        name: comment
        description: 'The ID of the comment. emxample: 1'
        example: 17
        required: true
        schema:
          type: integer
  /api/comments:
    get:
      summary: 'response all comments'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    {\n         \"id\": 1,\n         \"content\": \"This is a comment1.\",\n         \"user_id\": 1,\n         \"post_id\": 7\n    },\n    {\n         \"id\": 2,\n         \"content\": \"This is a comment2.\",\n         \"user_id\": 1,\n         \"post_id\": 22\n     },\n}"
      tags:
        - 'Comment endpoint'
      security: []
  '/api/comments/{id}':
    put:
      summary: 'update auth''s comment by himself'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 1,\n    \"post_id\": 7,\n    \"user_id\": 1,\n    \"content\": \"Update a comment.\",\n}"
        401:
          description: '401, Unauthenticated'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"message\": \"Unauthenticated.\"\n{"
        403:
          description: '403, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No Permission.'
                properties:
                  message: { type: string, example: 'No Permission.' }
      tags:
        - 'Comment endpoint'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 'require the content of the post. Emxample: Update a comment.'
                  example: quia
    delete:
      summary: 'delete auth''s comment by himself'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        204:
          description: '204'
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
        403:
          description: '403, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No Permission.'
                properties:
                  message: { type: string, example: 'No Permission.' }
      tags:
        - 'Comment endpoint'
    get:
      summary: 'response specified comment'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 1,\n    \"post_id\": 7,\n    \"user_id\": 1,\n    \"content\": \"This is a comment.\",\n}"
        401:
          description: '401, Unauthenticated'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"message\": \"Unauthenticated.\""
      tags:
        - 'Comment endpoint'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the comment.'
        example: 8
        required: true
        schema:
          type: integer
  '/api/posts/{post}/comments':
    post:
      summary: 'create comments by users'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1010
                  content: 'This is a comment'
                  user_id: 1
                  post_id: 1
                properties:
                  id: { type: integer, example: 1010 }
                  content: { type: string, example: 'This is a comment' }
                  user_id: { type: integer, example: 1 }
                  post_id: { type: integer, example: 1 }
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'PostComment endpoint'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: 'the content of the user. emxample: This is a comment'
                  example: fugiat
              required:
                - comment
    parameters:
      -
        in: path
        name: post
        description: 'The ID of the post. emxample: 1'
        example: 17
        required: true
        schema:
          type: integer
  '/api/posts.comments/{post}':
    get:
      summary: 'response all comments of specified post'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    {\n        \"id\": 10,\n        \"content\": \"Aliquam vel modi.\",\n        \"user_id\": 3,\n        \"post_id\": 4\n    },\n    {\n        \"id\": 69,\n        \"content\": \"Et perspiciatis.\",\n        \"user_id\": 1,\n        \"post_id\": 4\n    }\n}"
      tags:
        - 'PostComment endpoint'
      security: []
    parameters:
      -
        in: path
        name: post
        description: 'The ID of the post. emxample: 1'
        example: 5
        required: true
        schema:
          type: integer
  '/api/posts/{post}/likes':
    get:
      summary: 'show amount of post total like'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  'number of the post like': 100
                  message: Success
                properties:
                  'number of the post like': { type: integer, example: 100 }
                  message: { type: string, example: Success }
      tags:
        - 'PostLike endpoint'
      security: []
    post:
      summary: 'create or destroy post like'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Success. Has been cancel like'
                properties:
                  message: { type: string, example: 'Success. Has been cancel like' }
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'PostLike endpoint'
    parameters:
      -
        in: path
        name: post
        description: 'The ID of the post. emxample: 1'
        example: 17
        required: true
        schema:
          type: integer
  /api/posts:
    get:
      summary: 'response all posts'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    {\n         \"id\": 1,\n         \"content\": \"This is a post1.\",\n         \"user_id\": 1,\n    },\n    {\n         \"id\": 2,\n         \"content\": \"This is a post2.\",\n         \"user_id\": 2,\n     },\n}"
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'Post endpoint'
      security: []
    post:
      summary: 'create posts by users'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 1010,\n    \"content\": \"This is a post\",\n    \"user_id\": 1,\n}"
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'Post endpoint'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  type: string
                  description: 'the content of the user. emxample: This is a post'
                  example: eos
              required:
                - post
  '/api/posts/{id}':
    put:
      summary: 'update auth''s post by himself'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 1,\n    \"user_id\": 1,\n    \"content\": \"Update a post.\",\n}"
        401:
          description: '401, Unauthenticated'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"message\": \"Unauthenticated.\"\n{"
        403:
          description: '403, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No Permission.'
                properties:
                  message: { type: string, example: 'No Permission.' }
      tags:
        - 'Post endpoint'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 'require the content of the post. Emxample: Update a post.'
                  example: ducimus
    delete:
      summary: 'delete auth''s post by himself'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        204:
          description: '204'
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
        403:
          description: '403, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No Permission.'
                properties:
                  message: { type: string, example: 'No Permission.' }
      tags:
        - 'Post endpoint'
    get:
      summary: 'response specified post'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"id\": 1,\n    \"user_id\": 1,\n    \"content\": \"This is a post.\",\n}"
        401:
          description: '401, Unauthenticated'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"message\": \"Unauthenticated.\""
      tags:
        - 'Post endpoint'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the post.'
        example: 17
        required: true
        schema:
          type: integer
  /api/users.comments:
    get:
      summary: 'response all comments of auth user'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    {\n        \"id\": 27,\n        \"post_id\": 3,\n        \"user_id\": 1,\n        \"comment\": \"Illo optio non.\",\n    },\n    {\n        \"id\": 29,\n        \"post_id\": 5,\n        \"user_id\": 1,\n        \"comment\": \"Suscipit sunt animi.\",\n    },\n}"
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'UserComment endpoint'
    parameters:
      -
        in: path
        name: user
        description: 'The ID of the user. emxample: 1'
        example: 18
        required: true
        schema:
          type: integer
  /api/users.posts:
    get:
      summary: 'response all posts of specified user'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    {\n        \"id\": 1,\n        \"user_id\": 1,\n        \"content\": \"Consectetur.\",\n    },\n    {\n        \"id\": 2,\n        \"user_id\": 1,\n        \"content\": \"Voluptate ullam.\",\n    },\n}"
        401:
          description: '401, Unauthenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message: { type: string, example: Unauthenticated. }
      tags:
        - 'UserPost endpoint'
    parameters:
      -
        in: path
        name: user
        description: 'The ID of the user. emxample: 1'
        example: 18
        required: true
        schema:
          type: integer
